##########################################################
####################  Load libraries  ####################
##########################################################
library(tidyverse)
library(Information)
library(caTools)
library(gridExtra)
library(caret)
library(randomForest)
library(pROC)
library(keras)

###################
####Functions######
###################
inx <- function (tours, inp.n) { # data: current dataframe; inp.n: position for non-inputs
  # numeric input indicator
  indx <- sapply(tours, is.numeric)
  indx[inp.n]<-FALSE
  
  # nominal input indicator
  index.cat<-sapply(tours, is.factor)
  index.cat[inp.n]<-FALSE
  
  # missing value indicator
  index.na<-sapply(tours,function(x) any(is.na(x)))
  index.na[inp.n]<-FALSE
  
  data.frame(indx, index.cat, index.na)
}

impute <- function(x,y) {
  x[is.na(x)]<-y
  x
}

## Mode function ##
mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}
## Mean function ##
means <- function(x) { mean(x, na.rm = TRUE) }

###################################################################################################
load(file = "digger_score.RData")
load(file ="myscore.RData")
## Get the names for every col
Varnames <- as.data.frame(seq(from=1, to=ncol(score)), col.names="index")
colnames(Varnames)[1] <-"index"
Varnames$name <- names(score) 

##  Variables I'm going to remove
rem <- c(2:7,10,11,14, 21:51,58:75,79,81,83,97,94)
new.tours <- score[ ,-rem]



######################
##### Transformation #####
######################

tours.xf <- new.tours
#Routine Update#
inp.n <- grep("^(EvalID|Book_12Mo)$",names(tours.xf))
inx3<-inx(tours.xf, inp.n) 
indx<-inx3$indx
index.cat<-inx3$index.cat
index.na<-inx3$index.na
#####################
indx <-c(21:23)

trans <- predict(TransformParams, tours.xf[,indx])

for (i in seq(1:3)){
  temp <- indx[i]
  tours.xf[ ,temp] <-trans[,i]
}



######################
##### Imputation #####
######################
tours.imp <- tours.xf

#Routine Update#
inp.n <- grep("^(EvalID|Book_12Mo)$",names(tours.imp))
inx3<-inx(tours.imp, inp.n) 
indx<-inx3$indx
index.cat<-inx3$index.cat
index.na<-inx3$index.na
#####################

names(tours.imp)[index.na==T]
# summary(tours.imp[index.na])

# Nominal Input: By Mode #

tours.imp[index.cat]<-as.data.frame(mapply(impute,x=tours.imp[index.cat],y = Mode))

# sort(sapply(tours.imp, function(x) sum(is.na(x))),decreasing = T)

# create missing value flag #
tours.imp[paste(names(tours.imp)[index.na], "NA", sep=".")] <- ifelse(
  is.na(new.tours[index.na]), 1, 0)

tours.imp[grep("NA$",names(tours.imp))]<-lapply(
  tours.imp[grep("NA$",names(tours.imp))], as.factor) 


#######################
#### Random Forest #### 
#######################
tours.rf<-tours.imp
vars1 <- -grep("^(EvalID|State)$",names(tours.rf))

tours.rf$SourceType <- factor(tours.rf$SourceType, levels=c(levels(tours.rf$SourceType), "Outside Sal"))

RF.class<- predict(RF, newdata=tours.rf, type="response")

df <- as.data.frame(RF.class)
df$EvalID <- tours.rf$EvalID
df <- df[, c(2,1)]

write.csv(df,"digger_predict.csv", row.names=F)

